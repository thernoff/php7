<?php
// Битовые операции
// Эти операции предназначены для работы (установки/снятия/проверки) групп битов в целой переменной.

// 12 -> 1100, 2 -> 0010
// a & b - число с установленными битами, которые выставлены и в a, и в b одновременно.
echo 12 & 2; // 0000 -> 0
echo "<br/>";

// a | b - число с установленными битами, которые выставлены либо в a, либо в b, либо одновременно.
echo 12 | 2; // 1110 -> 14
echo "<br/>";

// a ^ b - число с установленными битами, которые выставлены либо в a, либо в b.
echo 12 ^ 2; // 1110 -> 14
echo "<br/>";

// ~a - результат, у которого на месте единиц в a стоят нули , и наоборот.
echo ~ 12; // 0011 -> -13
echo "<br/>";

// a<<b - число, полученное поразрядным сдвигом a на b битов влево.
echo 12<<2; // 110000 -> 48
echo "<br/>";

// a>>b - число, полученное поразрядным сдвигом a на b битов вправо.
echo 11>>2; // 11 -> 3
echo "<br/>";

// Пример: создадим компактную схему хранения рисунков онлайн-редактора
// 9 бит (111111111) - ширина, 9 бит (111111111) - высота, 9 бит (111111111) - угол,
// 3 бита (111) угол, 2 бита (11) - тип примитива.
// Типы графических примитивов
define('LINE', 0); // 000 00
define('CURVE', 1); // 000 01
define('RECTANGLE', 2); // 000 10
define('ELLIPSE', 3); // 000 11
// Цвет
define('BLACK', 0); // 000 00
define('BLUE', 4); // 001 00
define('GREEN', 8); // 010 00
define('YELLOW', 12); // 011 00
define('ORANGE', 16); // 100 00
define('RED', 20); // 101 00
define('WHITE', 24); // 111 00

echo "Зеленый прямоугольник в десятичном формате";
echo "<br/>";
echo RECTANGLE | GREEN; // 010 10 -> 10
echo "<br/>";

echo "Красный эллипс в двоичном формате";
echo "<br/>";
echo decbin(ELLIPSE | RED); // 101 11 -> 23
echo "<br/>";

// Получим числовое представление зеленого квадрата со стороной 15 и повернутого на 45 градусов.
$angle = 45 << 5; // сдвигаем на 5 бит влево 45 = 101 101 -> 101 101 000 00
$height = 15 << 14;
$width = 15 << 23;

// Результат
echo "Зеленый квадрат со стороной 15 и повернутый на 45 градусов";
echo "<br/>";
echo RECTANGLE | GREEN | $angle | $height | $width; // 126076330 -> 000001111 000001111 000101101 010 10
echo "<br/>";

// Информация, закодированная в отдельных битах, может быть легко извлечена при помощи
// операторов поразрядного пересечения &, поразрядного сдвига вправо >> и подходящих
// битовых масок.
echo "Примитив: " . (126076330 & 3);
echo "<br/>";
echo "Цвет: " . (126076330 & 28);
echo "<br/>";
echo "Угол поворота: " . ((126076330 & 16352) >> 5);
echo "<br/>";
echo "Высота: " . ((126076330 & 8372224) >> 14);
echo "<br/>";
echo "Угол поворота: " . ((126076330 & 4286578688) >> 23);
echo "<br/>";
// 3, 28, 16352, 8372224 и 4286578688 - битовые маски (3 = 11, 28 = 11100, 16352 = 11111111100000, 8372224 = 11111111100000000000000 и т.д.)