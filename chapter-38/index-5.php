<?php
/**
 * Работа с фиксированными шрифтами
 *
 * Загрузка шрифта
 * int imageLoadFont(string $file)
 * загружает файл шрифтом и возращает идентификатор шрифта - это будет число, больше 5, т.к. пять первых номеров зарезервированы
 * как встроенные. Формат файла - бинарный, а потому зависит от архитектуры машины. Это значит, что файл со шрифтами должен быть сгенерирован
 * по крайней на машине с процессором такой же архитектуры, как и у той, на которой вы собираетесь использовать PHP.
 *
 *
 * Параметры шрифта
 * После того, как шрифт загружен, его можно использовать (встроенные шрифты загружать не требуется).
 * int imageFontHeight(int $font)
 * Возвращает высоту в пикселах каждого символа в заданном шрифте.
 *
 * int imageFontWidth(int $font)
 * Возращает ширину  в пикселах каждого символа в заданном шрифте.
 *
 *
 * Вывод строки
 * int imageString(resource $im, int $font, int $x, int $y, string $s, int $col)
 *
 * int imageStringUp(resource $im, int $font, int $x, int $y, string $s, int $col)
 * Выводит строку в вертикальном направлении.
 *
 *
 * Работа со шрифтами TrueType
 * Библиотека GD поддерживает также работу с векторными масштабируемыми шрифтами PostScript и TrueType.
 * Рассмотрим TrueType, т.к. во-первых, их очень много, а во-вторых, с ними проще работать в PHP.
 *
 * !!! Для того чтобы заработали приведенные далее функции, PHP должен быть откомпилирован и установлен вместе с библиотекой FreeType.
 * В Windows-версии PHP она установлена по умолчанию.
 *
 * Вывод строки
 * list imageTtfText(resource $im, int $size, int $angle, int $x, int $y, int $col, string $fontfile, string $text)
 * $size - размер шрифта
 * $angle - угол наклона в градусах выводимой строки, отсчитываемый от горизонтали против часовой стрелки
 * ($x, $y) - положение базовой точки (обычно левый нижний угол)
 * $col - идентификатор цвета
 * $fontfile - абсолютный путь к файлу шрифтов
 * $text - текст
 * Возращает список из 8 элементов.
 * !!! Тем не менее, функция всегда возращает координаты так, будто бы угол $angle равен нулю.
 *
 * Проблема с русскими буквами
 * Если вы хотите выводить текст, содержащий русские буквы, то должны вначале перекодировать его в специально представление.
 * В этом представлении каждый знак кириллицы имеет вид &#XXXX, где XXXX - код буквы в кодировке Unicode.
 * Знаки препинания и символы латинского алфавита в перекодировании не нуждаются.
 *
 *
 * Определение границ строки
 * list imageTtfBBox(int $size, int $angle, string $fontfile, string $text)
 * определяет, какой размер и положение заняла бы строка текста $text размера $size, выведенная под углом $angle
 * в какой-нибудь рисунок, в этот раз с учетом угла поворота. $fontfile - абсолютный путь к файлу шрифтов.
 *
 *
 * Коррекция функции imageTtfBBox()
 * Увы, авторы библиотеки FreeType, которая используется для вывода TTF-текста, что-то напутали, и в результате
 * функция imageTtfBBox() возращает правильные данные только при нулевом угле наклона строки.
 * См. стр.736 или lib/imagettf.php
 */

 ## Пример работы с TTF-шрифтом
require_once "lib/imagettf.php";
// Выводимая строка
$string = "Привет, мир!!!";
// Шрифт
$font = getcwd() . "/times.ttf";
//die($font);
// Загружаем фоновый рисунок
$im = imageCreateFromPng("matrix.png");
// Угол поворота зависит от текущего времени
$angle = (microtime(true) * 10) % 360;
// Если хотите, чтобы текст шел из угла в угол, раскомментируйте строчку:
# $angle = rad2deg(atan2(imageSY($im), imageSX($im)));
// Подгоняем размер текста под размер изображения
$size = imageTtfGetMaxSize(
  $angle, $font, $string,
  imageSX($im), imageSY($im)
);

// Создаем в палитре новые цвета
$shadow = imageColorAllocate($im, 0, 0, 0);
$color = imageColorAllocate($im, 128, 255, 0);

// Вычисляем координаты вывода, чтобы текст оказался в центре
$sz = imageTtfSize($size, $angle, $font, $string);
$x = (imageSX($im) - $sz[0]) / 2 + $sz[2];
$y = (imageSY($im) - $sz[1]) / 2 + $sz[3];

// Рисуем строку текста вначале черными со сдвигом, а затем основным цветом поверх (чтобы создать эффект тени)
imageTtfText($im, $size, $angle, $x + 3, $y + 2, $shadow, $font, $string);
imageTtfText($im, $size, $angle, $x, $y , $color, $font, $string);

header("Content-type: image/png");
imagePng($im);