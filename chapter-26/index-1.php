<?php
// Перехват ошибок и предупреждений
// Определяем новую функцию-обработчик
function myErrorHandler($errno, $msg, $file, $line) {
  // Чтобы при использовании оператора @ подавить использование пользовательской функции перехвата ошибок
  // можно воспользоваться значением error_reporting, который становится равным нулю во время использования @
  if (error_reporting() == 0) return;

  echo '<div style="border-style:inset; border-width:2">';
  echo "Произошла ошибка с кодом <b>$errno</b>!<br/>";
  echo "Файл: <tt>$file</tt>, строка $line.<br/>";
  echo "Текст ошибки: <i>$msg</i>";
  echo "</div>";
}

// Регистрируем функцию myErrorHandler для всех типов ошибок
set_error_handler("myErrorHandler", E_ALL);
// Вызываем функцию для несуществующего файла, чтобы сгенерировать предупреждение, которое будет перехвачено.
// При этом пользовательская функция перехвата ошибок вызывается вне зависимости от того, был ли использован оператор подавления ошибок
// в момент генерации предупреждения.
//filemtime("spoon.txt");
@filemtime("spoon.txt");

restore_error_handler();

// Вызываем функцию для несуществующего файла, чтобы сгенерировать предупреждение, которое будет перехвачено
//filemtime("spoon.txt");
@filemtime("spoon.txt");